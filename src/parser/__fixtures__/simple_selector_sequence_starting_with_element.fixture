Input:
tagname.class#id1#id2[attribute][attribute="test"]:not([class="class"]):first:not(:nth-child(2n+1))

Output:
{
  "type": "SelectorsGroup",
  "body": [
    {
      "type": "Selector",
      "body": [
        {
          "type": "SimpleSelectorSequence",
          "body": [
            {
              "type": "TypeSelector",
              "value": {
                "type": "Identifier",
                "value": "tagname"
              }
            },
            {
              "type": "ClassSelector",
              "value": {
                "type": "Identifier",
                "value": "class"
              }
            },
            {
              "type": "HashSelector",
              "value": {
                "type": "Identifier",
                "value": "id1"
              }
            },
            {
              "type": "HashSelector",
              "value": {
                "type": "Identifier",
                "value": "id2"
              }
            },
            {
              "type": "AttributeSelector",
              "attribute": {
                "type": "AttributeSelectorAttribute",
                "value": {
                  "type": "Identifier",
                  "value": "attribute"
                }
              }
            },
            {
              "type": "AttributeSelector",
              "attribute": {
                "type": "AttributeSelectorAttribute",
                "value": {
                  "type": "Identifier",
                  "value": "attribute"
                }
              },
              "matcher": {
                "type": "AttributeSelectorMatcher",
                "value": "="
              },
              "value": {
                "type": "AttributeSelectorValue",
                "value": {
                  "type": "StringLiteral",
                  "value": "test"
                }
              },
              "caseSensitive": true
            },
            {
              "type": "PseudoClassSelector",
              "body": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "value": "not"
                },
                "params": [
                  {
                    "type": "NotExpressionArgument",
                    "body": {
                      "type": "AttributeSelector",
                      "attribute": {
                        "type": "AttributeSelectorAttribute",
                        "value": {
                          "type": "Identifier",
                          "value": "class"
                        }
                      },
                      "matcher": {
                        "type": "AttributeSelectorMatcher",
                        "value": "="
                      },
                      "value": {
                        "type": "AttributeSelectorValue",
                        "value": {
                          "type": "StringLiteral",
                          "value": "class"
                        }
                      },
                      "caseSensitive": true
                    }
                  }
                ]
              }
            },
            {
              "type": "PseudoClassSelector",
              "body": {
                "type": "Identifier",
                "value": "first"
              }
            },
            {
              "type": "PseudoClassSelector",
              "body": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "value": "not"
                },
                "params": [
                  {
                    "type": "NotExpressionArgument",
                    "body": {
                      "type": "PseudoClassSelector",
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "value": "nth-child"
                        },
                        "params": [
                          {
                            "type": "NthChildExpressionArgument",
                            "step": {
                              "type": "NumberLiteral",
                              "value": 2
                            },
                            "offset": {
                              "type": "NumberLiteral",
                              "value": 1
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
